dnl Initialise autoconf

AC_INIT(skstream/skstream.cpp)

dnl Initialise automake

SKSTREAM_MAJOR=0
SKSTREAM_MINOR=2
SKSTREAM_MICRO=91
SKSTREAM_VERSION=$SKSTREAM_MAJOR.$SKSTREAM_MINOR.$SKSTREAM_MICRO

AC_SUBST(SKSTREAM_VERSION)

SKSTREAM_CURRENT=0
SKSTREAM_REVISION=0
SKSTREAM_AGE=0
SKSTREAM_VERSION_INFO=$SKSTREAM_CURRENT:$SKSTREAM_REVISION:$SKSTREAM_AGE
SKSTREAM_VERSION_NO=$SKSTREAM_CURRENT.$SKSTREAM_AGE.$SKSTREAM_REVISION

AC_SUBST(SKSTREAM_CURRENT)
AC_SUBST(SKSTREAM_VERSION_INFO)
AC_SUBST(SKSTREAM_VERSION_NO)

AM_INIT_AUTOMAKE("skstream", $SKSTREAM_VERSION)
AM_CONFIG_HEADER(config.h)

dnl Test for GNU libtool

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

dnl Test for C++ compiler

AC_PROG_CXX

AC_ARG_ENABLE(debug,
    [  --enable-debug          enable debug information [default=no]],
    [
        if test "$enableval" = "yes"; then
            CXXFLAGS="$CXXFLAGS -Wall -DDEBUG"
        else
            CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
        fi
    ],[
        CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
    ]
)

dnl Test for ANSI standard language features

dnl Test for C++ bool keyword

AC_MSG_CHECKING([for C++ bool keyword])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_bool,
[
    AC_TRY_COMPILE(,
    [
        bool t = true, f = false;
    ],
    [
        ac_cv_feature_bool=yes
    ],
    [
        ac_cv_feature_bool=no
    ])
])

if test "$ac_cv_feature_bool" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ namespaces

AC_MSG_CHECKING([for C++ namespaces])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_namespaces,
[
    AC_TRY_COMPILE(
    [
        namespace foo { int i; }
        namespace bar { int i; }
        namespace baz { int i; }

        using namespace foo;
        using bar::i;
    ],
    [
        foo::i = 1;
        bar::i = 2;
        baz::i = 3;
    ],
    [
        ac_cv_feature_namespaces=yes
    ],
    [
        ac_cv_feature_namespaces=no
    ])
])

if test "$ac_cv_feature_namespaces" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ exception handling

AC_MSG_CHECKING([for C++ exception handling])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_exceptions,
[
    AC_TRY_COMPILE(,
    [
			try
			{
			    throw 17;
			}
			catch (int i)
			{
			}
			catch (...)
			{
			}
		        ],
    [
        ac_cv_feature_exceptions=yes
    ],
    [
        ac_cv_feature_exceptions=no
    ])
])

if test "$ac_cv_feature_exceptions" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ Standard Library

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdio iostream string)

AC_LANG_RESTORE

dnl Test for types

AC_MSG_CHECKING([for socket type])
SKSTREAM_SOCKET_TYPE=int;
SKSTREAM_SOCKET_HEADER="#include <unistd.h>"
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_socket_type,
[
    AC_TRY_COMPILE([#include <winsock.h>],
    [
        SOCKET foo;
    ],
    [
        ac_cv_socket_type=SOCKET
        SKSTREAM_SOCKET_TYPE=$ac_cv_socket_type
        SKSTREAM_SOCKET_HEADER="#include <winsock.h>"
    ],
    [
        ac_cv_socket_type=int
        SKSTREAM_SOCKET_TYPE=$ac_cv_socket_type
        SKSTREAM_SOCKET_HEADER="#include <unistd.h>"
    ])
])
AC_MSG_RESULT($ac_cv_socket_type)
AC_SUBST(SKSTREAM_SOCKET_TYPE)
AC_SUBST(SKSTREAM_SOCKET_HEADER)

AC_LANG_RESTORE

AC_MSG_CHECKING([for socket address length type])
SKSTREAM_SOCKLEN_TYPE=int;
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_socklen_type,
[
    AC_TRY_COMPILE([#include <unistd.h>],
    [
        socklen_t foo;
    ],
    [
        ac_cv_socklen_type=socklen_t
        SKSTREAM_SOCKLEN_TYPE=$ac_cv_socklen_type
    ],
    [
        ac_cv_socklen_type=int
        SKSTREAM_SOCKLEN_TYPE=$ac_cv_socklen_type
    ])
])
AC_MSG_RESULT($ac_cv_socklen_type)
AC_SUBST(SKSTREAM_SOCKLEN_TYPE)

AC_LANG_RESTORE

SKSTREAM_UNIX_PC=
SKSTREAM_UNIX_PC_IN=

AC_MSG_CHECKING([for unix domain sockets])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_TRY_COMPILE([#include <sys/types.h>
                #include <sys/socket.h>
                #include <sys/un.h>],
[
    sockaddr_un sa;
    sa.sun_family = AF_UNIX;
],
[
    AC_MSG_RESULT(yes)
    AC_DEFINE(SKSTREAM_UNIX_SOCKETS, 1,
              [Define if unix domain sockets are supported])
    SKSTREAM_UNIX_PC=skstream-unix-0.3.pc
    SKSTREAM_UNIX_PC_IN=skstream-unix-0.3.pc.in
],
[
    AC_MSG_RESULT(no)
])

AC_LANG_RESTORE

AC_SUBST(SKSTREAM_UNIX_PC)
AC_SUBST(SKSTREAM_UNIX_PC_IN)

AC_MSG_CHECKING([for timeval header])
SKSTREAM_TIMEVAL_HEADER="#include <sys/time.h>"
SKSTREAM_UNIX_HEADER_FLAG=0
SKSTREAM_BEOS_HEADER_FLAG=0
SKSTREAM_WINDOWS_HEADER_FLAG=0
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_timeval_header,
[
    AC_TRY_COMPILE([#include <winsock.h>],
    [
        timeval foo;
    ],
    [
        ac_cv_timeval_header="#include <winsock.h>"
        SKSTREAM_TIMEVAL_HEADER=$ac_cv_timeval_header
        SKSTREAM_WINDOWS_HEADER_FLAG=1
    ],
    [
        AC_TRY_COMPILE([#include <sys/time.h>],
        [
            timeval foo;
        ],
        [
            ac_cv_timeval_header="#include <sys/time.h>"
            SKSTREAM_TIMEVAL_HEADER=$ac_cv_timeval_header
            SKSTREAM_UNIX_HEADER_FLAG=1
        ],
        [
            AC_TRY_COMPILE([#include <net/socket.h>],
            [
                timeval foo;
            ],
            [
                ac_cv_timeval_header="#include <net/socket.h>"
                SKSTREAM_TIMEVAL_HEADER=$ac_cv_timeval_header
                SKSTREAM_BEOS_HEADER_FLAG=1
            ],
            [
                AC_MSG_ERROR(Unable to find header for timeval type)
            ])
    
        ])
    ])
])
AC_MSG_RESULT($ac_cv_timeval_header)
AC_SUBST(SKSTREAM_TIMEVAL_HEADER)
AC_SUBST(SKSTREAM_UNIX_HEADER_FLAG)
AC_SUBST(SKSTREAM_BEOS_HEADER_FLAG)
AC_SUBST(SKSTREAM_WINDOWS_HEADER_FLAG)

AC_LANG_RESTORE

dnl Test for socket block error value

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_MSG_CHECKING([for socket block error value])
AC_TRY_COMPILE([#include <errno.h>],
[
    int i = EINPROGRESS;
],
[
    SKSTREAM_BLOCK_ERROR_VAL=EINPROGRESS
],
[
    AC_TRY_COMPILE([#include <windows.h>],
    [
        int i = WSAEWOULDBLOCK;
    ],
    [
        SKSTREAM_BLOCK_ERROR_VAL=WSAEWOULDBLOCK
    ],
    [
        AC_MSG_RESULT(failed)
        AC_MSG_ERROR(Unable to determine error message for socket blocking)
    ])
])
AC_MSG_RESULT($SKSTREAM_BLOCK_ERROR_VAL)
AC_SUBST(SKSTREAM_BLOCK_ERROR_VAL)

AC_LANG_RESTORE

dnl Test for IPv6 socket addresses

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_MSG_CHECKING([for IPv6 socket address])
AC_TRY_COMPILE([#include <sys/types.h>
                #include <sys/socket.h>
                #include <netinet/in.h>],
[
    sockaddr_in6 sin6;
    sin6.sin6_family = AF_INET6;
],
[
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_IPV6, 1, true if we have sockaddr_in6 and AF_INET6)
],
[
    AC_TRY_COMPILE([#include <windows.h>],
    [
        sockaddr_in6 sin6;
        sin6.sin6_family = AF_INET6;
    ],
    [
        AC_MSG_RESULT(yes)
        AC_DEFINE(HAVE_IPV6, 1, true if we have sockaddr_in6 and AF_INET6)
    ],
    [
        AC_MSG_RESULT(no)
    ])
])


dnl Test for C library functions

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_FUNCS([getaddrinfo inet_aton closesocket])

AC_LANG_RESTORE

dnl Test for Libraries

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AM_PATH_CPPUNIT(1.6.1,, 
            AC_MSG_WARN(Couldn't Find CppUnit - Tests will not work)
)
AC_LANG_RESTORE

dnl test for support programs

AC_CHECK_PROG(SK_ZIP, zip, zip, no)
AM_CONDITIONAL(HAVE_PROG_ZIP, test x$ac_cv_prog_SK_ZIP = xzip)

SKSTREAM_LIB_SUFFIX="-0.3"
SKSTREAM_LIBS="-lskstream$SKSTREAM_LIB_SUFFIX"
# There might be a better way to do this.
AC_MSG_CHECKING(for mingw32)
AC_TRY_COMPILE(,[
#ifdef __MINGW32__
#error MingW32 detected, adding -lwsock32 to SKSTREAM_LIBS
#endif
],
AC_MSG_RESULT(no),[
AC_MSG_RESULT(yes)
SKSTREAM_LIBS="$SKSTREAM_LIBS -lwsock32"
])
AC_SUBST(SKSTREAM_LIB_SUFFIX)
AC_SUBST(SKSTREAM_LIBS)

SKSTREAM_CFLAGS=""
AC_SUBST(SKSTREAM_CFLAGS)

SYSTEM_LIBS=""
AC_SUBST(SYSTEM_LIBS)

AC_DEFINE(CONFIG_H_INCLUDED, 1, true if config.h was included)

dnl Generate files

AC_OUTPUT([
	Makefile
	skstream/Makefile
	ping/Makefile
	test/Makefile
	skstream.spec
	skstream-0.3.pc
	skstream-unix-0.3.pc
	skstream/skstreamconfig.h
])
