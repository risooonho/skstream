dnl Initialise autoconf

AC_INIT(skstream.cpp)

dnl Initialise automake

SKSTREAM_MAJOR=0
SKSTREAM_MINOR=2
SKSTREAM_MICRO=4
SKSTREAM_VERSION=$SKSTREAM_MAJOR.$SKSTREAM_MINOR.$SKSTREAM_MICRO

AC_SUBST(SKSTREAM_VERSION)

SKSTREAM_CURRENT=3
SKSTREAM_REVISION=0
SKSTREAM_AGE=0
SKSTREAM_VERSION_INFO=$SKSTREAM_CURRENT:$SKSTREAM_REVISION:$SKSTREAM_AGE
SKSTREAM_VERSION_NO=$SKSTREAM_CURRENT.$SKSTREAM_AGE.$SKSTREAM_REVISION

AC_SUBST(SKSTREAM_CURRENT)
AC_SUBST(SKSTREAM_VERSION_INFO)
AC_SUBST(SKSTREAM_VERSION_NO)

AM_INIT_AUTOMAKE("skstream", $SKSTREAM_VERSION)
AM_CONFIG_HEADER(config.h)

dnl Test for GNU libtool

AM_PROG_LIBTOOL

dnl Test for C++ compiler

AC_PROG_CXX

AC_ARG_ENABLE(debug,
    [  --enable-debug          enable debug information [default=no]],
    [
        if test "$enableval" = "yes"; then
            CXXFLAGS="$CXXFLAGS -Wall -DDEBUG"
        else
            CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
        fi
    ],[
        CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
    ]
)

dnl Test for socklen_t and define it to int if it's not there.
dnl socklen_t should be used with functions like getpeername and recvfrom because
dnl some platforms use int*'s and some use size_t*'s. Note that we can't simply
dnl use AC_CHECK_TYPE because socklen_t isn't in the standard headers.
AC_MSG_CHECKING(if socklen_t is defined)
AC_TRY_COMPILE(
   [#include <sys/socket.h>],
   [socklen_t len = 42; return len;],
   		[AC_MSG_RESULT(yes)],
   		[AC_MSG_RESULT(no)
    		AC_DEFINE(socklen_t, int, need to define this on BSD platforms)]) 


dnl Test for ANSI standard language features

dnl Test for C++ bool keyword

AC_MSG_CHECKING([for C++ bool keyword])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_bool,
[
    AC_TRY_COMPILE(,
    [
        bool t = true, f = false;
    ],
    [
        ac_cv_feature_bool=yes
    ],
    [
        ac_cv_feature_bool=no
    ])
])

if test "$ac_cv_feature_bool" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ namespaces

AC_MSG_CHECKING([for C++ namespaces])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_namespaces,
[
    AC_TRY_COMPILE(
    [
        namespace foo { int i; }
        namespace bar { int i; }
        namespace baz { int i; }

        using namespace foo;
        using bar::i;
    ],
    [
        foo::i = 1;
        bar::i = 2;
        baz::i = 3;
    ],
    [
        ac_cv_feature_namespaces=yes
    ],
    [
        ac_cv_feature_namespaces=no
    ])
])

if test "$ac_cv_feature_namespaces" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ exception handling

AC_MSG_CHECKING([for C++ exception handling])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_exceptions,
[
    AC_TRY_COMPILE(,
    [
			try
			{
			    throw 17;
			}
			catch (int i)
			{
			}
			catch (...)
			{
			}
		        ],
    [
        ac_cv_feature_exceptions=yes
    ],
    [
        ac_cv_feature_exceptions=no
    ])
])

if test "$ac_cv_feature_exceptions" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ Standard Library

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdio iostream string)

AC_LANG_RESTORE

dnl Test for Libraries

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AM_PATH_CPPUNIT(1.6.1,, 
            AC_MSG_WARN(Couldn't Find CppUnit - Tests will not work)
)
AC_LANG_RESTORE

dnl test for support programs

AC_CHECK_PROG(SK_ZIP, zip, zip, no)
AM_CONDITIONAL(HAVE_PROG_ZIP, test x$ac_cv_prog_SK_ZIP = xzip)

SKSTREAM_LIBS="-lskstream"
# There might be a better way to do this.
AC_MSG_CHECKING(for mingw32)
AC_TRY_COMPILE(,[
#ifdef __MINGW32__
#error MingW32 detected, adding -lwsock32 to SKSTREAM_LIBS
#endif
],
AC_MSG_RESULT(no),[
AC_MSG_RESULT(yes)
SKSTREAM_LIBS="$SKSTREAM_LIBS -lwsock32"
])
AC_SUBST(SKSTREAM_LIBS)

SKSTREAM_CFLAGS=""
AC_SUBST(SKSTREAM_CFLAGS)

SYSTEM_LIBS=""
AC_SUBST(SYSTEM_LIBS)

AC_DEFINE(CONFIG_H_INCLUDED, 1, true if config.h was included)

dnl Generate files

AC_OUTPUT([
	Makefile
	test/Makefile
	skstream-config
	skstream.spec
])
